<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    mapper.xml配置文件是以sql语句为单位进行配置的，最终是将sql语句封装到MappedStatement对象中
    Mapped Statement是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。
    mapper.xml配置文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。

    namespace命名空间的作用是为了更好的对sql进行隔离和管理
    namespace接口类路径，通过这样的设置找到对应的mapper接口
-->
<mapper namespace="cn.ade.mapper.UserMapper">

    <resultMap id="queryUserResultMap" type="user">
        <id column="id_" property="id"/>
        <result column="username_" property="username"/>
        <result column="address_" property="address"/>
        <result column="sex_" property="sex"/>
        <result column="birthday_" property="birthday"/>
    </resultMap>
    
    <resultMap id="userAndItemsResultMap" type="user">
        <!-- 用户信息映射 -->
        <id property="id" column="user_id"/>
        <result property="username" column="username"/>
        <result property="address" column="address"/>

        <!-- 用户中订单集合的映射 -->
        <collection property="ordersList" ofType="cn.ade.domain.Orders">
            <id property="id" column="id"/>
            <result property="number" column="number"/>
            <result property="createtime" column="createtime"/>
            <result property="note" column="note"/>
            <result property="user_id" column="user_id"/>

            <!-- 订单中订单详情的映射 -->
            <collection property="orderdetails" ofType="cn.ade.domain.Orderdetail">
                <id property="id" column="orderdetail_id"/>
                <result property="items_id" column="items_id"/>
                <result property="items_num" column="items_num"/>

                <!-- 商品详情的映射 -->
                <association property="items" javaType="cn.ade.domain.Items">
                    <id property="id" column="items_id"/>
                    <result property="name" column="name"/>
                    <result property="pic" column="pic"/>
                </association>
            </collection>
        </collection>
    </resultMap>
    
    <!--
        id必须与方法名一致
        #{}:就相当于一个占位符，{}中可以使用value或者其他任意字符，目的是防止sql注入
    -->
    <select id="findUserById" parameterType="int" resultType="user">
        SELECT * FROM user WHERE id = #{id}
    </select>

    <select id="findUserByIdResultMap" parameterType="int" resultMap="queryUserResultMap">
        SELECT id id_,username username_,birthday birthday_,sex sex_,address address_  FROM USER WHERE id = #{id}
    </select>

    <!--
        ${}:就相当于一个拼接符，{}中只能使用value
    -->
    <select id="findUserByUsername" parameterType="string" resultType="user">
        SELECT * FROM user WHERE username LIKE "%${value}%"
    </select>

    <!--// oracle自定义序列
        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Integer">
            SELECT 自定义序列.NEXTVAL FROM DUAL
        </selectKey>-->
    <!--// 自定义uuid
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
        select uuid()
    </selectKey>-->
    <insert id="insertUser" parameterType="user">
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO user VALUES (null, #{username},#{birthday},#{sex},#{address})
    </insert>

    <delete id="deleteUser" parameterType="int">
        DELETE FROM user WHERE id = #{id}
    </delete>

    <update id="updateUser" parameterType="user">
        UPDATE user SET username = #{username}, birthday = #{birthday}, sex = #{sex}, address = #{address} WHERE id =
         #{id}
    </update>
    
    <select id="findUserAndItems" resultMap="userAndItemsResultMap">
        SELECT
          o.*,
          u.username,
          u.address,
          od.id orderdetail_id,
          od.items_id,
          od.items_num,
          i.name,
          i.pic
        FROM orders o, orderdetail od, user u, items i
        WHERE o.user_id = u.id AND od.orders_id = o.id AND od.items_id = i.id;
    </select>
</mapper>